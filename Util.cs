using Godot;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Util {

    // Gets UTF32 chars    
    public static List<string> Chars(string s) {
        var bytes = Encoding.UTF32.GetBytes(s);
        var list = new List<string>();
        for (int i = 0; i < bytes.Length; i += 4) {
            list.Add(char.ConvertFromUtf32(bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24));
        }
        return list;
    }

    public const string Yi = "\U0001b006";
    public const string Ye = "\U0001b001";
    public const string Wu = "\U0001b11f";
    public const string YI = "\U0001b120";
    public const string YE = "\U0001b121";
    public const string WU = "\U0001b122";
    public static readonly Dictionary<string, ulong> SegmentMap = new Dictionary<string, ulong>() {
        //       44   40   36   32   28   24   20   16   12    8    4    0
        {"ア", 0b00_0000_0000_0000_0000_0000_0000_0001_0000_0000_0001_1100},
        {"イ", 0b00_0000_0000_0000_0000_0000_0000_0000_0010_0011_0000_0000},
        {"ウ", 0b00_0000_0000_0000_0000_0000_0000_0011_0000_0000_0101_1010},
        {"エ", 0b00_0000_0000_0000_0000_0001_1000_0000_0000_0011_1001_1000},
        {"オ", 0b00_0000_0000_0000_0000_0000_0000_0011_0001_1100_0011_1000},
        {"カ", 0b00_0000_0000_0000_0000_0000_0000_0010_1101_0001_1000_0000},
        {"キ", 0b00_0000_0000_0000_0000_0000_0000_0000_1100_0011_1101_1000},
        {"ク", 0b00_0000_0000_0000_0000_0000_0000_0011_0000_0000_0001_1011},
        {"ケ", 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0011_1001_1011},
        {"コ", 0b00_0000_0000_0000_0000_0001_1000_0000_0001_1000_0001_1000},
        {"サ", 0b00_0000_0000_0000_0000_0000_0000_0000_0001_1101_1111_1000},
        {"シ", 0b00_0000_0000_0000_0000_0001_1000_0000_0101_0000_0000_1000},
        {"ス", 0b00_0000_0000_0000_0000_0000_0110_0011_0000_0000_0001_1000},
        {"セ", 0b00_0000_0000_0000_0000_0001_0000_0000_0010_1011_1000_0000},
        {"ソ", 0b00_0000_0000_0000_0000_0000_0000_0011_0000_0000_0000_0010},
        {"タ", 0b00_0000_0000_0000_0000_0000_0011_0011_0000_0000_0001_1011},
        {"チ", 0b00_0000_0000_0000_0000_0000_0000_0000_1110_0011_0000_0000},
        {"ツ", 0b00_0000_0000_0000_0000_0001_0000_0000_0001_1001_1000_0010},
        {"テ", 0b00_0000_0000_0000_0000_0000_0000_0000_1100_0010_0001_1000},
        {"ト", 0b00_0000_0000_0000_0000_0000_0000_0000_1100_0000_0000_0110},
        {"ナ", 0b00_0000_0000_0000_0000_0000_0000_0010_1100_0001_1000_0000},
        {"ニ", 0b00_0000_0000_0000_0000_0001_1000_0000_0000_0000_0001_1000},
        {"ヌ", 0b00_0000_0000_0000_0000_0000_0011_0011_0000_0000_0001_1000},
        {"ネ", 0b00_0000_0000_0000_0000_0000_0110_0011_0000_0010_0101_1000},
        {"ノ", 0b00_0000_0000_0000_0000_0000_0000_0011_0000_0000_0000_0000},
        //       44   40   36   32   28   24   20   16   12    8    4    0
        {"ハ", 0b00_0000_0000_0000_0000_0000_0000_0000_0001_1000_0000_0110},
        {"ヒ", 0b00_0000_0000_0000_0000_0001_1000_0000_1100_0000_0000_0110},
        {"フ", 0b00_0000_0000_0000_0000_0000_0000_0011_0000_0000_0001_1000},
        {"ヘ", 0b00_0000_0000_0000_0000_0000_0111_1000_0000_0000_0000_0010},
        {"ホ", 0b00_0000_0000_0000_0000_0000_0000_0000_0001_0011_1101_1100},
        {"マ", 0b00_0000_0000_0000_0000_0000_0111_0001_0000_0000_0001_1000},
        {"ミ", 0b00_0000_0000_0000_0000_0001_1000_0000_1100_0000_0001_1000},
        {"ム", 0b00_0000_0000_0000_0000_0001_1000_0011_0001_0000_0000_0000},
        {"メ", 0b00_0000_0000_0000_0000_0000_0011_0011_0000_0000_0000_0000},
        {"モ", 0b00_0000_0000_0000_0000_0001_0000_0000_1100_0011_0001_1000},
        {"ヤ", 0b00_0000_0000_0000_0000_0000_0000_0001_0010_0011_1000_0000},
        {YI,   0b00_0000_0000_0000_0000_0000_0000_0011_0000_0001_1100_0000},
        {"ユ", 0b00_0000_0000_0000_0000_0001_1000_0000_0000_0011_1000_1000},
        {YE,   0b00_0000_0000_0000_0000_0001_1000_0000_0010_0011_0000_0000},
        {"ヨ", 0b00_0000_0000_0000_0000_0001_1000_0000_1101_1000_0001_1000},
        {"ラ", 0b00_0000_0000_0000_0000_0000_0000_0100_1100_0000_0001_1000},
        {"リ", 0b00_0000_0000_0000_0000_0001_0000_0000_0001_1000_0000_0010},
        {"ル", 0b00_0000_0000_0000_0000_0000_0000_0100_0000_0011_1000_0110},
        {"レ", 0b00_0000_0000_0000_0000_0000_1000_0100_0000_0000_0000_0110},
        {"ロ", 0b00_0000_0000_0000_0000_0001_1000_0000_0001_1000_0001_1110},
        {"ワ", 0b00_0000_0000_0000_0000_0000_0000_0011_0000_0000_0001_1010},
        {"ヰ", 0b00_0000_0000_0000_0000_0000_0000_0000_1100_0011_1101_1010},
        {WU,   0b00_0000_0000_0000_0000_0000_1000_0000_1100_0011_1001_1000},
        {"ヱ", 0b00_0000_0000_0000_0000_0001_1000_0001_0000_0011_0001_1000},
        {"ヲ", 0b00_0000_0000_0000_0000_0000_0000_0011_0100_0000_0001_1000},
        {"ン", 0b00_0000_0000_0000_0000_0000_0000_0011_0000_0000_0000_1000},
        {"゛", 0b00_0000_0000_0000_0000_1010_0000_0000_0000_0000_0000_0000},
        {"゜", 0b00_0000_0000_0000_0001_1110_0000_0000_0000_0000_0000_0000},
        {"ー", 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0011_1000_0000},
        {"＝", 0b00_0000_0000_0000_0000_0000_0000_0000_0001_1011_1000_0000},
        //       44   40   36   32   28   24   20   16   12    8    4    0
        {"ァ", 0b00_0100_0000_0001_1100_0000_0000_0000_0000_0000_0000_0000},
        {"ィ", 0b00_0101_0001_0000_0000_0000_0000_0000_0000_0000_0000_0000},
        {"ゥ", 0b00_1100_0000_0101_1010_0000_0000_0000_0000_0000_0000_0000},
        {"ェ", 0b11_0000_0001_1001_1000_0000_0000_0000_0000_0000_0000_0000},
        {"ォ", 0b00_1100_1110_0011_1000_0000_0000_0000_0000_0000_0000_0000},
        {"ャ", 0b00_0100_0001_1101_1000_0000_0000_0000_0000_0000_0000_0000},
        {"ュ", 0b11_0000_0001_1000_1000_0000_0000_0000_0000_0000_0000_0000},
        {"ョ", 0b11_0011_1100_0001_1000_0000_0000_0000_0000_0000_0000_0000},
        {"ヮ", 0b00_1100_0000_0001_1010_0000_0000_0000_0000_0000_0000_0000},
        {"ッ", 0b10_0000_1100_1000_0010_0000_0000_0000_0000_0000_0000_0000},
         
        {"０", 0b00_0000_0000_0000_0000_0001_1000_0000_0001_1001_0001_1110},
        {"１", 0b00_0000_0000_0000_0000_0001_1000_0000_0000_0011_1100_1000},
        {"２", 0b00_0000_0000_0000_0000_0001_1000_0000_1100_1000_0001_1100},
        {"３", 0b00_0000_0000_0000_0000_0001_1000_0000_1001_1000_0001_1000},
        {"４", 0b00_0000_0000_0000_0000_0000_0000_0000_1101_1000_0000_0010},
        {"５", 0b00_0000_0000_0000_0000_0001_1000_0000_1101_0000_0001_1010},
        {"６", 0b00_0000_0000_0000_0000_0001_1000_0000_1101_0000_0001_1110},
        {"７", 0b00_0000_0000_0000_0000_0000_0000_0001_0000_0010_0001_1000},
        {"８", 0b00_0000_0000_0000_0000_0001_1000_0000_1101_1000_0001_1110},
        {"９", 0b00_0000_0000_0000_0000_0001_1000_0000_1101_1000_0001_1010},
         
        {"Ａ", 0b00_0000_0000_0000_0000_0000_0000_0000_1101_1000_0001_1110},
        {"Ｂ", 0b00_0000_0000_0000_0000_0001_1000_0000_1001_1011_1001_1000},
        {"Ｃ", 0b00_0000_0000_0000_0000_0001_1000_0000_0000_0000_0001_1110},
        {"Ｄ", 0b00_0000_0000_0000_0000_0001_1000_0000_0001_1011_1001_1000},
        {"Ｅ", 0b00_0000_0000_0000_0000_0001_1000_0000_1100_0000_0001_1110},
        {"Ｆ", 0b00_0000_0000_0000_0000_0000_0000_0000_1100_0000_0001_1110},
        {"Ｇ", 0b00_0000_0000_0000_0000_0001_1000_0000_1001_0000_0001_1110},
        {"Ｈ", 0b00_0000_0000_0000_0000_0000_0000_0000_1101_1000_0000_0110},
        {"Ｉ", 0b00_0000_0000_0000_0000_0001_1000_0000_0000_0011_1101_1000},
        {"Ｊ", 0b00_0000_0000_0000_0000_0000_1000_0000_0000_0011_1001_1000},
        {"Ｋ", 0b00_0000_0000_0000_0000_0000_0110_0001_0100_0000_0000_0110},
        {"Ｌ", 0b00_0000_0000_0000_0000_0001_1000_0000_0000_0000_0000_0110},
        {"Ｍ", 0b00_0000_0000_0000_0000_0000_0001_1001_0001_1010_0000_0110},
        {"Ｎ", 0b00_0000_0000_0000_0000_0000_0111_1000_0001_1000_0000_0110},
        {"Ｏ", 0b00_0000_0000_0000_0000_0000_1000_0100_0000_1000_0001_1110},
        {"Ｐ", 0b00_0000_0000_0000_0000_0000_0000_0000_1100_1000_0001_1110},
        {"Ｑ", 0b00_0000_0000_0000_0000_0000_1110_0100_0000_1000_0001_1110},
        {"Ｒ", 0b00_0000_0000_0000_0000_0000_0110_0000_1100_1000_0001_1110},
        {"Ｓ", 0b00_0000_0000_0000_0000_0001_1111_1000_0000_0000_0001_1000},
        {"Ｔ", 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0011_1001_1000},
        {"Ｕ", 0b00_0000_0000_0000_0000_0001_1000_0000_0001_1000_0000_0110},
        {"Ｖ", 0b00_0000_0000_0000_0000_0000_0000_0011_0000_0000_0000_0110},
        {"Ｗ", 0b00_0000_0000_0000_0000_0000_0110_0010_0001_1000_0000_0110},
        {"Ｘ", 0b00_0000_0000_0000_0000_0000_0111_1011_0000_0000_0000_0000},
        {"Ｙ", 0b00_0000_0000_0000_0000_0000_0001_1001_0000_0010_0000_0000},
        {"Ｚ", 0b00_0000_0000_0000_0000_0001_1000_0011_0000_0000_0001_1000},

        {"ａ", 0b00_0000_0000_0000_0000_0001_0000_0100_1001_0000_0000_0000},
        {"ｂ", 0b00_0000_0000_0000_0000_0001_0000_0000_1001_0011_1000_0000},
        {"ｃ", 0b00_0000_0000_0000_0000_0001_0000_0000_1000_0010_0000_0000},
        {"ｄ", 0b00_0000_0000_0000_0000_0001_0000_0000_1001_1010_0000_0000},
        {"ｅ", 0b00_0000_0000_0000_0000_0001_0000_0100_1000_0010_0000_0000},
        {"ｆ", 0b00_0000_0000_0000_0000_0000_0000_0000_1000_0011_1001_0000},
        {"ｇ", 0b00_0000_0000_0000_0000_0001_0000_0000_1001_1001_1001_0000},
        {"ｈ", 0b00_0000_0000_0000_0000_0000_0000_0000_1001_0011_1000_0000},
        {"ｉ", 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0010_1000_0000},
        {"ｊ", 0b00_0000_0000_0000_0000_0000_1000_0000_0000_0010_1000_0000},
        {"ｋ", 0b00_0000_0000_0000_0000_0000_0110_0000_1000_0011_1000_0000},
        {"ｌ", 0b00_0000_0000_0000_0000_0001_0000_0000_0000_0011_1000_0000},
        {"ｍ", 0b00_0000_0000_0000_0000_0000_0000_0000_1101_0010_0000_0100},
        {"ｎ", 0b00_0000_0000_0000_0000_0000_0000_0000_1001_0010_0000_0000},
        {"ｏ", 0b00_0000_0000_0000_0000_0001_0000_0000_1001_0010_0000_0000},
        {"ｐ", 0b00_0000_0000_0000_0000_0000_0000_0000_1000_1011_1001_0000},
        {"ｑ", 0b00_0000_0000_0000_0000_0000_0000_0000_1001_1001_1001_0000},
        {"ｒ", 0b00_0000_0000_0000_0000_0000_0000_0000_1000_0010_0000_0000},
        {"ｓ", 0b00_0000_0000_0000_0000_0001_0110_0000_1000_0000_0000_0000},
        {"ｔ", 0b00_0000_0000_0000_0000_0001_0000_0000_1000_0011_1000_0000},
        {"ｕ", 0b00_0000_0000_0000_0000_0001_0000_0000_0001_0010_0000_0000},
        {"ｖ", 0b00_0000_0000_0000_0000_0000_0000_0100_0000_0010_0000_0000},
        {"ｗ", 0b00_0000_0000_0000_0000_0000_0110_0010_0001_0000_0000_0100},
        {"ｘ", 0b00_0000_0000_0000_0000_0000_0110_0100_0000_0000_0000_0000},
        {"ｙ", 0b00_0000_0000_0000_0000_0000_0000_0100_1000_1001_1000_0000},
        {"ｚ", 0b00_0000_0000_0000_0000_0001_0000_0100_1000_0000_0000_0000},

        {"。", 0b00_0000_0000_0000_0000_0000_0000_0000_1000_1001_1001_0000},
        {"、", 0b00_0000_0000_0000_0000_0000_0110_0000_0000_0000_0000_0000},
        {"（", 0b00_0000_0000_0000_0000_0000_0000_0010_1001_0000_0000_0000},
        {"）", 0b00_0000_0000_0000_0000_0000_0000_0001_0100_0000_0000_0010},
        {"［", 0b00_0000_0000_0000_0000_0000_0000_0000_1101_0000_0000_0100},
        {"］", 0b00_0000_0000_0000_0000_0000_0000_0000_1100_1000_0000_0010},
        {"｛", 0b00_0000_0000_0000_0000_0000_0000_0000_1101_0001_1000_0100},
        {"｝", 0b00_0000_0000_0000_0000_0000_0000_0000_1100_1010_0000_0010},
        {"「", 0b00_0000_0000_0000_0000_0000_0000_0000_1001_0000_0000_0000},
        {"」", 0b00_0000_0000_0000_0000_0000_0000_0000_0100_0000_0000_0010},
        {"『", 0b00_0000_0000_0000_0000_0001_0000_0000_0101_1010_0001_1010},
        {"』", 0b00_0000_0000_0000_0000_0001_1000_0000_1001_0001_1000_1110},
        {"・", 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0001_0000_0000},
        {"〈", 0b00_0000_0000_0000_0000_0000_0110_0010_0000_0000_0000_0000},
        {"〉", 0b00_0000_0000_0000_0000_0000_0001_1001_0000_0000_0000_0000},
        {"※", 0b00_0000_0000_0000_0000_0000_0111_1011_0000_0000_1000_0000},
        {"〜", 0b00_0000_0000_0000_0000_0000_0000_0101_1000_0000_0000_0000},
        {"！", 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0010_1100_0000},
        {"？", 0b00_0000_0000_0000_0000_0000_0000_0000_1000_1010_0001_1000},

        {"　", 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000},
        {"'", 0b00_0000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000},

        {Pending, PendingBitfield},
    };

    public const ulong CursorBitfield = 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001_1000;
    public const ulong LatinCursorBitfield = 0b00_0000_0000_0000_0000_0000_0000_0000_0000_0100_0101_1001;
    public const ulong SuteganaCursorBitfield = 0b00_0000_0000_0001_1000_0000_0000_0000_0000_0000_0000_0000;
    public const string Pending = "_";
    public const ulong PendingBitfield = 0b00_0000_0000_0000_0000_0010_0000_0000_0000_0000_0000_0000;

    static Dictionary<string, string> NormalizationMapFunc() {
        string hankaku = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-=.,()[]{}·<>~!? ";
        string zenkaku = "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ０１２３４５６７８９" +
            "ー＝。、（）［］｛｝・〈〉〜！？　";

        string withDakuten = "ガギグゲゴザジズゼゾダヂヅデドバビブベボヷヸヹヺヴ";
        string withoutDakuten = "カキクケコサシスセソタチツテトハヒフヘホワヰヱヲウ";

        string withHandakuten = "パピプペポ";
        string withoutHandakuten = "ハヒフヘホ";

        string extraA = "゙゚\"`＜＞";
        string extraB = "゛゜゛゜〈〉";

        string hiragana = $"あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもや{Yi}ゆ{Ye}よらりるれろわゐ{Wu}ゑをん" +
            $"がぎぐげござじずぜぞだぢづでどばびぶべぼゔぱぴぷぺぽ" +
            $"ぁぃぅぇぉゃゅょゎっ";
        string katakana = $"アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤ{YI}ユ{YE}ヨラリルレロワヰ{WU}ヱヲン" +
            $"ガギグゲゴザジズゼゾダヂヅデドバビブベボヴパピプペポ" +
            $"ァィゥェォャュョヮッ";

        var dict = Chars(hankaku).Zip(Chars(zenkaku), (a, b) => (a, b))
            .Concat(Chars(withDakuten).Zip(Chars(withoutDakuten), (a, b) => (a, $"{b}゛")))
            .Concat(Chars(withHandakuten).Zip(Chars(withoutHandakuten), (a, b) => (a, $"{b}゜")))
            .Concat(Chars(extraA).Zip(Chars(extraB), (a, b) => (a, b)))
            .Concat(Chars(hiragana).Zip(Chars(katakana), (a, b) => (a, b)))
            .ToDictionary(pair => $"{pair.Item1}", pair => $"{pair.Item2}");
        var prevDict = new Dictionary<string, string>(dict);
        foreach (var key in prevDict.Keys) {
            if (prevDict.ContainsKey(prevDict[key]))
                dict[key] = prevDict[prevDict[key]]; // Sometimes you need both hiragana->katanana and dakuten separation.
        }

        return dict;
    }

    public static readonly Dictionary<string, string> NormalizationMap = NormalizationMapFunc();
    public static string Normalize(string text) {
        return string.Join("", Chars(text).Select(c => NormalizationMap.ContainsKey(c) ? NormalizationMap[c] : c));
    }

    public static readonly HashSet<string> Dakuten =  Chars("゛゜").ToHashSet();
    public static readonly HashSet<string> Sutegana = Chars("ァィゥェォャュョヮッ").ToHashSet();
    public static readonly HashSet<string> Convertable = Chars("ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ［］'").ToHashSet();

    // Based *loosely* off of https://stackoverflow.com/a/2012855    
    // How loosely? That one is just a generic tree.
    public class Trie
    {
        string _transformed = null;
        string _leftover = null;
        Dictionary<string, Trie> _children = new Dictionary<string, Trie>();

        public Trie() {}

        void AddEntryRecursive(List<string> key, string transformed, string leftover, string init)
        {
            if (_transformed == null) {
                _transformed = init;
                _leftover = "";
            }

            if (key.Count == 0) {
                _transformed = transformed;
                _leftover = leftover;
                return;
            }

            var first = key[0];
            if (!_children.ContainsKey(first))
                _children[first] = new Trie();
            key.RemoveAt(0);
            _children[first].AddEntryRecursive(key, transformed, leftover, init + first);
        }

        public void AddEntry(string key, string transformed, string leftover)
            => AddEntryRecursive(Chars(key), transformed, leftover, "");

        // Two places to stop:
        // • reached node with no children (do transform)
        // • reached node with children and then tried to descend incorrectly (do transform instead)
        (string, string)? LookupRecursive(List<string> s)
        {
            if (_children.Count == 0)
                return (_transformed, _leftover + string.Join("", s));
            if (s.Count == 0)
                return null;

            var first = s[0];
            if (_children.ContainsKey(first)) {
                s.RemoveAt(0);
                return _children[first].LookupRecursive(s);
            } else
                return (_transformed, _leftover + string.Join("", s));
        }

        public (string Transformed, string Leftover) Lookup(string s)
        {
            string transformed = "";
            string leftover = s;
            while (true) {
                var result = LookupRecursive(Chars(leftover));
                if (result != null) {
                    bool progress = result.Value.Item2.Length < leftover.Length;
                    transformed += result.Value.Item1;
                    leftover = result.Value.Item2;
                    if (!progress) {
                        transformed += leftover;
                        leftover = "";
                        break;
                    }
                } else {
                    break;
                }
            }

            return (transformed, leftover);
        }
    }

    static Trie ConversionTrieFunc() {
        var list = new List<(string, (string, string))>() {
            (  "a", ("ア"    , "")), (  "i", ("イ"    , "")), (  "u", ("ウ"    , "")), (  "e", ("エ"    , "")), (  "o", ("オ"    , "")),
            ( "ka", ("カ"    , "")), ( "ki", ("キ"    , "")), ( "ku", ("ク"    , "")), ( "ke", ("ケ"    , "")), ( "ko", ("コ"    , "")),
            ("kya", ("キャ"  , "")), ("kyi", ("キィ"  , "")), ("kyu", ("キュ"  , "")), ("kye", ("キェ"  , "")), ("kyo", ("キョ"  , "")),
            ( "qa", ("クァ"  , "")), ( "qi", ("クィ"  , "")), ( "qu", ("ク"    , "")), ( "qe", ("クェ"  , "")), ( "qo", ("クォ"  , "")),
            ("kwa", ("クァ"  , "")), ("kwi", ("クィ"  , "")), ("kwu", ("クゥ"  , "")), ("kwe", ("クェ"  , "")), ("kwo", ("クォ"  , "")),
            ( "ga", ("カ゛"  , "")), ( "gi", ("キ゛"  , "")), ( "gu", ("ク゛"  , "")), ( "ge", ("ケ゛"  , "")), ( "go", ("コ゛"  , "")),
            ("gya", ("キ゛ャ", "")), ("gyi", ("キ゛ィ", "")), ("gyu", ("キ゛ュ", "")), ("gye", ("キ゛ェ", "")), ("gyo", ("キ゛ョ", "")),
            ("gwa", ("ク゛ァ", "")), ("gwi", ("ク゛ィ", "")), ("gwu", ("ク゛ゥ", "")), ("gwe", ("ク゛ェ", "")), ("gwo", ("ク゛ォ", "")),
            ( "ca", ("カ"    , "")), ( "ci", ("シ"    , "")), ( "cu", ("ク"    , "")), ( "ce", ("セ"    , "")), ( "co", ("コ"    , "")),
            ( "sa", ("サ"    , "")), ( "si", ("シ"    , "")), ( "su", ("ス"    , "")), ( "se", ("セ"    , "")), ( "so", ("ソ"    , "")),
            ("sya", ("シャ"  , "")), ("syi", ("シィ"  , "")), ("syu", ("シュ"  , "")), ("sye", ("シェ"  , "")), ("syo", ("ショ"  , "")),
            ("sha", ("シャ"  , "")), ("shi", ("シ"    , "")), ("shu", ("シュ"  , "")), ("she", ("シェ"  , "")), ("sho", ("ショ"  , "")),
            ( "za", ("サ゛"  , "")), ( "zi", ("シ゛"  , "")), ( "zu", ("ス゛"  , "")), ( "ze", ("セ゛"  , "")), ( "zo", ("ソ゛"  , "")),
            ("zya", ("シ゛ャ", "")), ("zyi", ("シ゛ィ", "")), ("zyu", ("シ゛ュ", "")), ("zye", ("シ゛ェ", "")), ("zyo", ("シ゛ョ", "")),
            ("zha", ("シ゛ャ", "")), ("zhi", ("シ゛"  , "")), ("zhu", ("シ゛ュ", "")), ("zhe", ("シ゛ェ", "")), ("zho", ("シ゛ョ", "")),
            ( "ja", ("シ゛ャ", "")), ( "ji", ("シ゛"  , "")), ( "ju", ("シ゛ュ", "")), ( "je", ("シ゛ェ", "")), ( "jo", ("シ゛ョ", "")),
            ("jya", ("シ゛ャ", "")), ("jyi", ("シ゛ィ", "")), ("jyu", ("シ゛ュ", "")), ("jye", ("シ゛ェ", "")), ("jyo", ("シ゛ョ", "")),
            ( "ta", ("タ"    , "")), ( "ti", ("チ"    , "")), ( "tu", ("ツ"    , "")), ( "te", ("テ"    , "")), ( "to", ("ト"    , "")),
            ("tya", ("チャ"  , "")), ("tyi", ("チィ"  , "")), ("tyu", ("チュ"  , "")), ("tye", ("チェ"  , "")), ("tyo", ("チョ"  , "")),
            ("cha", ("チャ"  , "")), ("chi", ("チ"    , "")), ("chu", ("チュ"  , "")), ("che", ("チェ"  , "")), ("cho", ("チョ"  , "")),
            ("tsa", ("ツァ"  , "")), ("tsi", ("ツィ"  , "")), ("tsu", ("ツ"    , "")), ("tse", ("ツェ"  , "")), ("tso", ("ツォ"  , "")),
            ("tha", ("テャ"  , "")), ("thi", ("ティ"  , "")), ("thu", ("テュ"  , "")), ("the", ("テェ"  , "")), ("tho", ("テョ"  , "")),
                                                             ("t'yu", ("テュ"  , "")),
            ("twa", ("トァ"  , "")), ("twi", ("トィ"  , "")), ("twu", ("トゥ"  , "")), ("twe", ("トェ"  , "")), ("two", ("トォ"  , "")),
                                     ("t'i", ("ティ"  , "")), ("t'u", ("トゥ"  , "")),
            ( "da", ("タ゛"  , "")), ( "di", ("チ゛"  , "")), ( "du", ("ツ゛"  , "")), ( "de", ("テ゛"  , "")), ( "do", ("ト゛"  , "")),
            ("dya", ("チ゛ャ", "")), ("dyi", ("チ゛ィ", "")), ("dyu", ("チ゛ュ", "")), ("dye", ("チ゛ェ", "")), ("dyo", ("チ゛ョ", "")),
            ("dha", ("テ゛ャ", "")), ("dhi", ("テ゛ィ", "")), ("dhu", ("テ゛ュ", "")), ("dhe", ("テ゛ェ", "")), ("dho", ("テ゛ョ", "")),
                                                             ("t'yu", ("テ゛ュ", "")),
            ("dwa", ("ト゛ァ", "")), ("dwi", ("ト゛ィ", "")), ("dwu", ("ト゛ゥ", "")), ("dwe", ("ト゛ェ", "")), ("dwo", ("ト゛ォ", "")),
                                     ("d'i", ("ト゛ィ", "")), ("d'u", ("ト゛ゥ", "")),
            ( "na", ("ナ"    , "")), ( "ni", ("ニ"    , "")), ( "nu", ("ヌ"    , "")), ( "ne", ("ネ"    , "")), ( "no", ("ノ"    , "")),
            ("nya", ("ニャ"  , "")), ("nyi", ("ニィ"  , "")), ("nyu", ("ニュ"  , "")), ("nye", ("ニェ"  , "")), ("nyo", ("ニョ"  , "")),
            ( "ha", ("ハ"    , "")), ( "hi", ("ヒ"    , "")), ( "hu", ("フ"    , "")), ( "he", ("ヘ"    , "")), ( "ho", ("ホ"    , "")),
            ("hya", ("ヒャ"  , "")), ("hyi", ("ヒィ"  , "")), ("hyu", ("ヒュ"  , "")), ("hye", ("ヒェ"  , "")), ("hyo", ("ヒョ"  , "")),
            ("hwa", ("ファ"  , "")), ("hwi", ("フィ"  , "")),("hwyu", ("フュ"  , "")), ("hwe", ("フェ"  , "")), ("hwo", ("フォ"  , "")),
            ( "fa", ("ファ"  , "")), ( "fi", ("フィ"  , "")), ( "fu", ("フ"    , "")), ( "fe", ("フェ"  , "")), ( "fo", ("フォ"  , "")),
            ("fya", ("フャ"  , "")), ("fyi", ("フィ"  , "")), ("fyu", ("フュ"  , "")), ("fye", ("フェ"  , "")), ("fyo", ("フョ"  , "")),
            ( "pa", ("ハ゜"  , "")), ( "pi", ("ヒ゜"  , "")), ( "pu", ("フ゜"  , "")), ( "pe", ("ヘ゜"  , "")), ( "po", ("ホ゜"  , "")),
            ("pya", ("ヒ゜ャ", "")), ("pyi", ("ヒ゜ィ", "")), ("pyu", ("ヒ゜ュ", "")), ("pye", ("ヒ゜ェ", "")), ("pyo", ("ヒ゜ョ", "")),
            ( "ba", ("ハ゛"  , "")), ( "bi", ("ヒ゛"  , "")), ( "bu", ("フ゛"  , "")), ( "be", ("ヘ゛"  , "")), ( "bo", ("ホ゛"  , "")),
            ("bya", ("ヒ゛ャ", "")), ("byi", ("ヒ゛ィ", "")), ("byu", ("ヒ゛ュ", "")), ("bye", ("ヒ゛ェ", "")), ("byo", ("ヒ゛ョ", "")),
            ( "ma", ("マ"    , "")), ( "mi", ("ミ"    , "")), ( "mu", ("ム"    , "")), ( "me", ("メ"    , "")), ( "mo", ("モ"    , "")),
            ("mya", ("ミャ"  , "")), ("myi", ("ミィ"  , "")), ("myu", ("ミュ"  , "")), ("mye", ("ミェ"  , "")), ("myo", ("ミョ"  , "")),
            ( "ya", ("ヤ"    , "")), ( "yi", ("イ"    , "")), ( "yu", ("ユ"    , "")), ( "ye", ("イェ"  , "")), ( "yo", ("ヨ"    , "")),
            ( "ra", ("ラ"    , "")), ( "ri", ("リ"    , "")), ( "ru", ("ル"    , "")), ( "re", ("レ"    , "")), ( "ro", ("ロ"    , "")),
            ("rya", ("リャ"  , "")), ("ryi", ("リィ"  , "")), ("ryu", ("リュ"  , "")), ("rye", ("リェ"  , "")), ("ryo", ("リョ"  , "")),
            ( "wa", ("ワ"    , "")), ( "wi", ("ウィ"  , "")), ( "wu", ("ウ"    , "")), ( "we", ("ウェ"  , "")), ( "wo", ("ヲ"    , "")),
            ("wha", ("ウァ"  , "")), ("whi", ("ウィ"  , "")), ("whu", ("ウ"    , "")), ("whe", ("ウェ"  , "")), ("who", ("ウォ"  , "")),
            ( "va", ("ヴ゛ァ", "")), ( "vi", ("ヴ゛ィ", "")), ( "vu", ("ヴ゛"  , "")), ( "ve", ("ヴ゛ェ", "")), ( "vo", ("ヴ゛ォ", "")),
            ("vya", ("ヴ゛ャ", "")), ("vyi", ("ヴ゛ィ", "")), ("vyu", ("ヴ゛ュ", "")), ("vye", ("ヴ゛ェ", "")), ("vyo", ("ヴ゛ョ", "")),
            ( "xa", ("ァ"    , "")), ( "xi", ("ィ"    , "")), ( "xu", ("ゥ"    , "")), ( "xe", ("ェ"    , "")), ( "xo", ("ォ"    , "")),
            ("xya", ("ャ"    , "")), ("xyi", ("ィ"    , "")), ("xyu", ("ュ"    , "")), ("xye", ("ェ"    , "")), ("xyo", ("ョ"    , "")),
                                                              ("xtu", ("ッ"    , "")),
                                                             ("xtsu", ("ッ"    , "")),
            ("xwa", ("ヮ"    , "")),                          ("xwu", ("ゥ"    , "")),
            ( "la", ("ァ"    , "")), ( "li", ("ィ"    , "")), ( "lu", ("ゥ"    , "")), ( "le", ("ェ"    , "")), ( "lo", ("ォ"    , "")),
            ("lya", ("ャ"    , "")), ("lyi", ("ィ"    , "")), ("lyu", ("ュ"    , "")), ("lye", ("ェ"    , "")), ("lyo", ("ョ"    , "")),
                                                              ("ltu", ("ッ"    , "")),
                                                             ("ltsu", ("ッ"    , "")),
            ("lwa", ("ヮ"    , "")),                          ("lwu", ("ゥ"    , "")),
                                     ("wyi", ("ヰ"    , "")), ("wyu", (WU      , "")), ("wye", ("ヱ"    , "")),
                                     ("ywi", (YI      , "")),                          ("ywe", (YE      , "")),

            ("xn", ("ン", "")), ("n", ("ン", "")), ("nn", ("ン", "")), ("n'", ("ン", "")), 
            ("bb", ("ッ", "b")), ("cc", ("ッ", "c")), ("dd", ("ッ", "d")), ("ff", ("ッ", "f")), ("gg", ("ッ", "g")),
            ("hh", ("ッ", "h")), ("jj", ("ッ", "j")), ("kk", ("ッ", "k")), ("ll", ("ッ", "l")), ("mm", ("ッ", "m")),
            ("pp", ("ッ", "p")), ("qq", ("ッ", "q")), ("rr", ("ッ", "r")), ("ss", ("ッ", "s")), ("tt", ("ッ", "t")),
            ("vv", ("ッ", "v")), ("ww", ("ッ", "w")), ("xx", ("ッ", "x")), ("yy", ("ッ", "y")), ("zz", ("ッ", "z")),
            ("vv", ("ッ", "v")), ("ww", ("ッ", "w")), ("xx", ("ッ", "x")), ("yy", ("ッ", "y")), ("zz", ("ッ", "z")),
            ("www", ("ww", "w")),
            ( "[", ("「", "")), ( "]", ("」", "")), 
            ("z[", ("『", "")), ("z]", ("』", "")), 
            ("z/", ("・", "")),
            ("zx", ("※", ""))
        };

        list = list.Select(pair => (Util.Normalize(pair.Item1), (Util.Normalize(pair.Item2.Item1), Util.Normalize(pair.Item2.Item2)))).ToList();
        var trie = new Trie();
        foreach (var item in list) {
            trie.AddEntry(item.Item1, item.Item2.Item1, item.Item2.Item2);
        }

        return trie;    
    }

    public static readonly Trie ConversionTrie = ConversionTrieFunc();
}